<!DOCTYPE html>
<html>
<head><meta name="generator" content="Hexo 3.9.0">
  <meta charset="utf-8">
  <title>Spring微服务之-软负载中心 | lyyourc</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <link rel="shortcut icon" href="/favicon.ico">
  <link rel="stylesheet" href="/css/app.css">
  <!-- <link rel='stylesheet' href='http://fonts.useso.com/css?family=Source+Code+Pro'> -->
  
</head>
</html>
<body>
  <nav class="app-nav">
  
    
      <a href="/.">home</a>
    
  
    
      <a href="/archives">archive</a>
    
  
    
      <a href="/atom.xml">rss</a>
    
  
</nav>

  <main class="post">
  <article>
  <h1 class="article-title">
    <a href="/2019/07/02/Spinrg????????Eureka/">Spring微服务之-软负载中心</a>
  </h1>

  <section class="article-meta">
    <p class="article-date">July 02 2019</p>
  </section>

  <section class="article-entry">
    <h3 id="Spring微服务之-软负载中心"><a href="#Spring微服务之-软负载中心" class="headerlink" title="Spring微服务之-软负载中心"></a>Spring微服务之-软负载中心</h3><p>@(syoka) </p>
<h6 id="序言-本篇文章不会教你如何搭建一个eureka（需要请查看spring-io官网用例），而是简单说说自己的理解和遇到的一些坑"><a href="#序言-本篇文章不会教你如何搭建一个eureka（需要请查看spring-io官网用例），而是简单说说自己的理解和遇到的一些坑" class="headerlink" title="序言:本篇文章不会教你如何搭建一个eureka（需要请查看spring.io官网用例），而是简单说说自己的理解和遇到的一些坑"></a>序言:本篇文章不会教你如何搭建一个eureka（需要请查看spring.io官网用例），而是简单说说自己的理解和遇到的一些坑</h6><hr>
<h4 id="软负载中心出现的契机"><a href="#软负载中心出现的契机" class="headerlink" title="软负载中心出现的契机"></a>软负载中心出现的契机</h4><p>如果我们有两台服务器，它们所提供的功能是一样的。我们使用Nginx等服务来该记录服务的地址和端口，当有消费者想要获取服务地址时，我们将类似以下信息返回消费端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      server 192.168.1.11:8080;</span><br><span class="line">      server 192.168.1.22:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>从这里体现出了负载中心的第一个特性，服务内聚</strong></p>
<p>在内部系统或者服务少的情况下，上述方法确实能够有效的解决问题（可控制服务出入口，适用支付金融业），但是面对分布式环境中对多服务管理的话这么做有两个问题:</p>
<ol>
<li><p>复杂:新增服务不是通过实例启动自动完成，而是需要手动维护。且直接映射物理服务，这对于DevOps人员来说并不友好。</p>
</li>
<li><p>单点故障：一旦负载中心挂了，其余所有消费端获取服务地址都将失败，对于此类问题，可以考虑加入一个【从负载均衡器】，在主负载器出现问题时进行故障切换。</p>
</li>
</ol>
<p><strong>因此这里我们要解决的第一个痛点就是一个自动检查新老服务上下线的软负载中心(内聚体现:注册中心)</strong></p>
<h4 id="软负载服务内聚的构建（以下统称注册中心）"><a href="#软负载服务内聚的构建（以下统称注册中心）" class="headerlink" title="软负载服务内聚的构建（以下统称注册中心）"></a>软负载服务内聚的构建（以下统称注册中心）</h4><h5 id="想要构建一个注册中心，首先得了解对于注册中心来说，它需要服务提供者提供什么样的元数据"><a href="#想要构建一个注册中心，首先得了解对于注册中心来说，它需要服务提供者提供什么样的元数据" class="headerlink" title="想要构建一个注册中心，首先得了解对于注册中心来说，它需要服务提供者提供什么样的元数据"></a>想要构建一个注册中心，首先得了解对于注册中心来说，它需要服务提供者提供什么样的元数据</h5><p>从文章开头的静态地址来看<br>，我们可以看出</p>
<ul>
<li>必须提供服务端的物理地址ip以及端口<br>（一般为了防止直接对物理地址的操作，会再抽象一层逻辑服务名）</li>
<li>为确保服务提供者的高可用，提供者一般也是采用集群部署，因此我们使用GroupId来标识一个集群</li>
</ul>
<p>最终从结构上来说：<br><strong>我们需要一个groupid来充当一组服务的逻辑名，每组groupid里存放着每个实例的物理地址以及端口</strong></p>
<h5 id="光有结构还不够，还需了解注册中心服务框架如何与客户端结合"><a href="#光有结构还不够，还需了解注册中心服务框架如何与客户端结合" class="headerlink" title="光有结构还不够，还需了解注册中心服务框架如何与客户端结合"></a>光有结构还不够，还需了解注册中心服务框架如何与客户端结合</h5><p>这里给出2钟:</p>
<ol>
<li>注册中心框架以jar包的方式和服务端一起启动，由客户端发起RESTFUL请求到注册中心服务端完成注册（eureka就是采用此方案）。</li>
<li>注册中心框架绑定到容器中。服务被在容器中启动，可以被注册中心感知。</li>
</ol>
<h4 id="软负载对服务状态的检测"><a href="#软负载对服务状态的检测" class="headerlink" title="软负载对服务状态的检测"></a>软负载对服务状态的检测</h4><p>注册中心需要感知所有服务的当前状态，防止向消费者返回已经下线或是有问题的服务地址，这个需要提供端定时向注册中心汇报自己的当前状态（称为:心跳包）</p>
<p>当然可能因为网络延时或者当前软负载中心负载很高，注册中心不能及时收到心跳包。此时不应该直接剔除服务并删除注册列表，毕竟注册一个服务所耗的资源还是很高的。因此注册中心应该有一定弹性，在没有收到心跳包也应该在一定时间内保留注册信息，并另开一个线程监视器再一定时间内继续监视，如还收不到心跳包，则判定下线。</p>
<h4 id="软负载的性能策略"><a href="#软负载的性能策略" class="headerlink" title="软负载的性能策略"></a>软负载的性能策略</h4><p>服务提供者将信息注册到注册中心，如果注册中心出问题，又没有容灾策略，那么所有消费者都获取不到服务提供者的位置。因此，所有服务消费者会在本地缓存一份。</p>
<p>这样做的好处：</p>
<ol>
<li>注册中心挂了也可以使用本地缓存直接请求。</li>
<li>提升了效率（不用每次请求都向注册中心获取服务地址，降低注册中心的负载，避免网络资源的浪费）</li>
</ol>
<p>客户端本地缓存:注册中心服务注册表发生变换时需要通知客户端刷新本地缓存，此处使用全量更新(实现简单)，还是增量更新(实现复杂)是可以权衡的。eureka采用增量更新。</p>
<p><strong>第二个痛点就是容灾策略，采用集群部署来解决</strong></p>
<h4 id="注册中心的集群化"><a href="#注册中心的集群化" class="headerlink" title="注册中心的集群化"></a>注册中心的集群化</h4><p>注册中心的统一化管理主要有两种实现方式</p>
<p> <strong>1.通过相互注册的同步方式(eureka就是采用这种方式)。</strong></p>
<p>例:A，B两个注册中心，把B当成一个服务提供者注册到A中，A也当成提供者注册在B中。这样两个注册中心就可保持同步，以此类推，有N个注册中心那么，每个注册中心需要完成N-1次注册即可。</p>
<p>这么做的好处是可以复用功能，也易于理解。但是从侧面也反映出它的缺点，同步效率会大大降低。<br>为了解决效率的问题，并且接受部分服务同步延时，可以选择类似batch批量同步。</p>
<p><strong>2.通过数据内聚的管理方式</strong></p>
<p>将所有的地址数据聚合在一起，所有注册中心从聚合服务获取，可以保证软负载服务的无状态，但是也得考虑如果聚合服务出现故障时的备用策略。</p>
<p>感觉自己写的很捞，后面有时间再改改吧。</p>
<hr>
<p>参考文档:</p>
<ul>
<li>大型网站系统与JAVA中间件实践（曾宪杰）</li>
<li>Spring Microservices in Action-Manning Publications (John Carnell)</li>
<li>SpringCloud 微服务实战（翟永超）</li>
</ul>

  </section>
</article>

  <div class="sharing grid">
  <section class="profile grid-item grid">
    <img class="avatar" src="http://7xrcp8.com1.z0.glb.clouddn.com/avatar.png" alt="avatar" />
    <div class="grid-item">
      <p class="title"> lyyourc </p>
      <p class="subtitle"> You Are The JavaScript In My HTML </p>
    <div>
  </section>

  <section class="share-btns">
    <!-- <p> share it if you like it~ </p> -->
    <a
  class="twitter-share-button"
  data-size="large"
  data-via="DrakeLeung"
  href="https://twitter.com/intent/tweet?text= id="Spring微服务之-软负载中"
>
  Tweet
</a>

<script>
  window.twttr = (function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0],
    t = window.twttr || {};
  if (d.getElementById(id)) return t;
  js = d.createElement(s);
  js.id = id;
  js.src = "https://platform.twitter.com/widgets.js";
  js.async = true;
  fjs.parentNode.insertBefore(js, fjs);

  t._e = [];
  t.ready = function(f) {
    t._e.push(f);
  };

  return t;
}(document, "script", "twitter-wjs"));
</script>

  </section>
</div>


  
    
<section class="article-comment">
  <div id="disqus_thread">
    <noscript>Please enable JavaScript to view the <a href="//disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
  </div>
</section>

<script>
  var disqus_shortname = 'drakeleung';
  
  var disqus_url = 'http://yoursite.com/2019/07/02/Spinrg????????Eureka/';
  
  (function(){
    var dsq = document.createElement('script');
    dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>


  
</main>

</body>
</html>
